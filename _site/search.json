[
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Last compiled: 2024-04-30\n\nReduced dataset Alternative 2\n\n\n1 Patent Dominance\n\n#import libraries\nlibrary(vroom)\nlibrary(data.table)\nlibrary(tidyverse)\n\n\ncol_types &lt;- list(\n  id = col_character(),\n  type = col_character(),\n  organization = col_character()\n)\n\nassignee_tbl &lt;- vroom(\n  file       = \"F:/Sneha/ss24-bdsb-SnehaPara/Dataset/Patent_data_reduced/assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\ncol_types &lt;- list(\n  patent_id = col_character(),\n  assignee_id = col_character()\n)\n\npatent_assignee_tbl &lt;- vroom(\n  file       = \"F:/Sneha/ss24-bdsb-SnehaPara/Dataset/Patent_data_reduced/patent_assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\nJoin_tbl &lt;- merge(patent_assignee_tbl,assignee_tbl, by.x = \"assignee_id\", by.y = \"id\") \n\nnum_tbl&lt;- Join_tbl%&gt;%\n  select(patent_id,organization)%&gt;% \n  count(organization)%&gt;%\n  group_by(organization) \n\nfinal_tbl &lt;- num_tbl %&gt;%\n  select (organization,n)%&gt;%\n  arrange(desc(n))\n\n#List of top ten companies with most assigned/granted patents.\n\nhead(final_tbl,10)\n\n\n\n  \n\n\n\n\n\n2 Recent patent acitivity\n\nList the top 10 companies with the most new granted patents for August 2014\n\nlibrary(vroom)\nlibrary(data.table)\nlibrary(tidyverse)\nlibrary(lubridate)\n\n\ncol_types &lt;- list(\n  id = col_character(),\n  type = col_character(),\n  organization = col_character()\n)\n\nassignee_tbl &lt;- vroom(\n  file       = \"F:/Sneha/ss24-bdsb-SnehaPara/Dataset/Patent_data_reduced/assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\ncol_types &lt;- list(\n  patent_id = col_character(),\n  assignee_id = col_character()\n)\n\npatent_assignee_tbl &lt;- vroom(\n  file       = \"F:/Sneha/ss24-bdsb-SnehaPara/Dataset/Patent_data_reduced/patent_assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\ncol_types &lt;- list(\n  id = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  num_claims = col_double()\n)\n\npatent_tbl &lt;- vroom(\n  file       = \"F:/Sneha/ss24-bdsb-SnehaPara/Dataset/Patent_data_reduced/patent.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\nJoin_tbl &lt;- merge(patent_assignee_tbl,assignee_tbl, by.x = \"assignee_id\", by.y = \"id\") \nJoin_1_tbl &lt;- merge(patent_tbl,Join_tbl, by.x=\"id\", by.y =\"patent_id\") \n\nFilter_2014_tbl &lt;- Join_1_tbl %&gt;%\n  select(\"id\", \"date\", \"organization\")%&gt;%\n  filter(between(date,as.Date(\"2014-08-01\"), as.Date(\"2014-08-31\")))%&gt;%\n  count(organization)%&gt;%\n  group_by(organization)    \n\n\n\nFinal_tbl &lt;- Filter_2014_tbl %&gt;%\n  select (organization,n)%&gt;%\n  arrange(desc(n))\n\n# List the top 10 companies with the most new granted patents for August 2014.\n\nhead(Final_tbl,10)\n\n\n\n  \n\n\n\n\n\n\n3 Innovation in Tech\n\ntop 5 USPTO tech main classes"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Last compiled: 2024-04-30\n\n1 Map the time course of the cumulative Covid-19 cases\n\n#import libraries\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(mapproj)\n\n\nurl &lt;- \"https://opendata.ecdc.europa.eu/covid19/casedistribution/csv\"\ncovid_data_tbl &lt;- fread(url)\n\nclass(covid_data_tbl)\n\n#&gt; [1] \"data.table\" \"data.frame\"\n\ncolnames(covid_data_tbl)\n\n#&gt;  [1] \"dateRep\"                                                   \n#&gt;  [2] \"day\"                                                       \n#&gt;  [3] \"month\"                                                     \n#&gt;  [4] \"year\"                                                      \n#&gt;  [5] \"cases\"                                                     \n#&gt;  [6] \"deaths\"                                                    \n#&gt;  [7] \"countriesAndTerritories\"                                   \n#&gt;  [8] \"geoId\"                                                     \n#&gt;  [9] \"countryterritoryCode\"                                      \n#&gt; [10] \"popData2019\"                                               \n#&gt; [11] \"continentExp\"                                              \n#&gt; [12] \"Cumulative_number_for_14_days_of_COVID-19_cases_per_100000\"\n\nstr(covid_data_tbl)\n\n#&gt; Classes 'data.table' and 'data.frame':   61900 obs. of  12 variables:\n#&gt;  $ dateRep                                                   : chr  \"14/12/2020\" \"13/12/2020\" \"12/12/2020\" \"11/12/2020\" ...\n#&gt;  $ day                                                       : int  14 13 12 11 10 9 8 7 6 5 ...\n#&gt;  $ month                                                     : int  12 12 12 12 12 12 12 12 12 12 ...\n#&gt;  $ year                                                      : int  2020 2020 2020 2020 2020 2020 2020 2020 2020 2020 ...\n#&gt;  $ cases                                                     : int  746 298 113 63 202 135 200 210 234 235 ...\n#&gt;  $ deaths                                                    : int  6 9 11 10 16 13 6 26 10 18 ...\n#&gt;  $ countriesAndTerritories                                   : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n#&gt;  $ geoId                                                     : chr  \"AF\" \"AF\" \"AF\" \"AF\" ...\n#&gt;  $ countryterritoryCode                                      : chr  \"AFG\" \"AFG\" \"AFG\" \"AFG\" ...\n#&gt;  $ popData2019                                               : int  38041757 38041757 38041757 38041757 38041757 38041757 38041757 38041757 38041757 38041757 ...\n#&gt;  $ continentExp                                              : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n#&gt;  $ Cumulative_number_for_14_days_of_COVID-19_cases_per_100000: num  9.01 7.05 6.87 7.13 6.97 ...\n#&gt;  - attr(*, \".internal.selfref\")=&lt;externalptr&gt;\n\n#check the unique country present.\nunique(covid_data_tbl$countriesAndTerritories)\n\n#&gt;   [1] \"Afghanistan\"                               \n#&gt;   [2] \"Albania\"                                   \n#&gt;   [3] \"Algeria\"                                   \n#&gt;   [4] \"Andorra\"                                   \n#&gt;   [5] \"Angola\"                                    \n#&gt;   [6] \"Anguilla\"                                  \n#&gt;   [7] \"Antigua_and_Barbuda\"                       \n#&gt;   [8] \"Argentina\"                                 \n#&gt;   [9] \"Armenia\"                                   \n#&gt;  [10] \"Aruba\"                                     \n#&gt;  [11] \"Australia\"                                 \n#&gt;  [12] \"Austria\"                                   \n#&gt;  [13] \"Azerbaijan\"                                \n#&gt;  [14] \"Bahamas\"                                   \n#&gt;  [15] \"Bahrain\"                                   \n#&gt;  [16] \"Bangladesh\"                                \n#&gt;  [17] \"Barbados\"                                  \n#&gt;  [18] \"Belarus\"                                   \n#&gt;  [19] \"Belgium\"                                   \n#&gt;  [20] \"Belize\"                                    \n#&gt;  [21] \"Benin\"                                     \n#&gt;  [22] \"Bermuda\"                                   \n#&gt;  [23] \"Bhutan\"                                    \n#&gt;  [24] \"Bolivia\"                                   \n#&gt;  [25] \"Bonaire, Saint Eustatius and Saba\"         \n#&gt;  [26] \"Bosnia_and_Herzegovina\"                    \n#&gt;  [27] \"Botswana\"                                  \n#&gt;  [28] \"Brazil\"                                    \n#&gt;  [29] \"British_Virgin_Islands\"                    \n#&gt;  [30] \"Brunei_Darussalam\"                         \n#&gt;  [31] \"Bulgaria\"                                  \n#&gt;  [32] \"Burkina_Faso\"                              \n#&gt;  [33] \"Burundi\"                                   \n#&gt;  [34] \"Cambodia\"                                  \n#&gt;  [35] \"Cameroon\"                                  \n#&gt;  [36] \"Canada\"                                    \n#&gt;  [37] \"Cape_Verde\"                                \n#&gt;  [38] \"Cases_on_an_international_conveyance_Japan\"\n#&gt;  [39] \"Cayman_Islands\"                            \n#&gt;  [40] \"Central_African_Republic\"                  \n#&gt;  [41] \"Chad\"                                      \n#&gt;  [42] \"Chile\"                                     \n#&gt;  [43] \"China\"                                     \n#&gt;  [44] \"Colombia\"                                  \n#&gt;  [45] \"Comoros\"                                   \n#&gt;  [46] \"Congo\"                                     \n#&gt;  [47] \"Costa_Rica\"                                \n#&gt;  [48] \"Cote_dIvoire\"                              \n#&gt;  [49] \"Croatia\"                                   \n#&gt;  [50] \"Cuba\"                                      \n#&gt;  [51] \"Curaçao\"                                   \n#&gt;  [52] \"Cyprus\"                                    \n#&gt;  [53] \"Czechia\"                                   \n#&gt;  [54] \"Democratic_Republic_of_the_Congo\"          \n#&gt;  [55] \"Denmark\"                                   \n#&gt;  [56] \"Djibouti\"                                  \n#&gt;  [57] \"Dominica\"                                  \n#&gt;  [58] \"Dominican_Republic\"                        \n#&gt;  [59] \"Ecuador\"                                   \n#&gt;  [60] \"Egypt\"                                     \n#&gt;  [61] \"El_Salvador\"                               \n#&gt;  [62] \"Equatorial_Guinea\"                         \n#&gt;  [63] \"Eritrea\"                                   \n#&gt;  [64] \"Estonia\"                                   \n#&gt;  [65] \"Eswatini\"                                  \n#&gt;  [66] \"Ethiopia\"                                  \n#&gt;  [67] \"Falkland_Islands_(Malvinas)\"               \n#&gt;  [68] \"Faroe_Islands\"                             \n#&gt;  [69] \"Fiji\"                                      \n#&gt;  [70] \"Finland\"                                   \n#&gt;  [71] \"France\"                                    \n#&gt;  [72] \"French_Polynesia\"                          \n#&gt;  [73] \"Gabon\"                                     \n#&gt;  [74] \"Gambia\"                                    \n#&gt;  [75] \"Georgia\"                                   \n#&gt;  [76] \"Germany\"                                   \n#&gt;  [77] \"Ghana\"                                     \n#&gt;  [78] \"Gibraltar\"                                 \n#&gt;  [79] \"Greece\"                                    \n#&gt;  [80] \"Greenland\"                                 \n#&gt;  [81] \"Grenada\"                                   \n#&gt;  [82] \"Guam\"                                      \n#&gt;  [83] \"Guatemala\"                                 \n#&gt;  [84] \"Guernsey\"                                  \n#&gt;  [85] \"Guinea\"                                    \n#&gt;  [86] \"Guinea_Bissau\"                             \n#&gt;  [87] \"Guyana\"                                    \n#&gt;  [88] \"Haiti\"                                     \n#&gt;  [89] \"Holy_See\"                                  \n#&gt;  [90] \"Honduras\"                                  \n#&gt;  [91] \"Hungary\"                                   \n#&gt;  [92] \"Iceland\"                                   \n#&gt;  [93] \"India\"                                     \n#&gt;  [94] \"Indonesia\"                                 \n#&gt;  [95] \"Iran\"                                      \n#&gt;  [96] \"Iraq\"                                      \n#&gt;  [97] \"Ireland\"                                   \n#&gt;  [98] \"Isle_of_Man\"                               \n#&gt;  [99] \"Israel\"                                    \n#&gt; [100] \"Italy\"                                     \n#&gt; [101] \"Jamaica\"                                   \n#&gt; [102] \"Japan\"                                     \n#&gt; [103] \"Jersey\"                                    \n#&gt; [104] \"Jordan\"                                    \n#&gt; [105] \"Kazakhstan\"                                \n#&gt; [106] \"Kenya\"                                     \n#&gt; [107] \"Kosovo\"                                    \n#&gt; [108] \"Kuwait\"                                    \n#&gt; [109] \"Kyrgyzstan\"                                \n#&gt; [110] \"Laos\"                                      \n#&gt; [111] \"Latvia\"                                    \n#&gt; [112] \"Lebanon\"                                   \n#&gt; [113] \"Lesotho\"                                   \n#&gt; [114] \"Liberia\"                                   \n#&gt; [115] \"Libya\"                                     \n#&gt; [116] \"Liechtenstein\"                             \n#&gt; [117] \"Lithuania\"                                 \n#&gt; [118] \"Luxembourg\"                                \n#&gt; [119] \"Madagascar\"                                \n#&gt; [120] \"Malawi\"                                    \n#&gt; [121] \"Malaysia\"                                  \n#&gt; [122] \"Maldives\"                                  \n#&gt; [123] \"Mali\"                                      \n#&gt; [124] \"Malta\"                                     \n#&gt; [125] \"Marshall_Islands\"                          \n#&gt; [126] \"Mauritania\"                                \n#&gt; [127] \"Mauritius\"                                 \n#&gt; [128] \"Mexico\"                                    \n#&gt; [129] \"Moldova\"                                   \n#&gt; [130] \"Monaco\"                                    \n#&gt; [131] \"Mongolia\"                                  \n#&gt; [132] \"Montenegro\"                                \n#&gt; [133] \"Montserrat\"                                \n#&gt; [134] \"Morocco\"                                   \n#&gt; [135] \"Mozambique\"                                \n#&gt; [136] \"Myanmar\"                                   \n#&gt; [137] \"Namibia\"                                   \n#&gt; [138] \"Nepal\"                                     \n#&gt; [139] \"Netherlands\"                               \n#&gt; [140] \"New_Caledonia\"                             \n#&gt; [141] \"New_Zealand\"                               \n#&gt; [142] \"Nicaragua\"                                 \n#&gt; [143] \"Niger\"                                     \n#&gt; [144] \"Nigeria\"                                   \n#&gt; [145] \"North_Macedonia\"                           \n#&gt; [146] \"Northern_Mariana_Islands\"                  \n#&gt; [147] \"Norway\"                                    \n#&gt; [148] \"Oman\"                                      \n#&gt; [149] \"Pakistan\"                                  \n#&gt; [150] \"Palestine\"                                 \n#&gt; [151] \"Panama\"                                    \n#&gt; [152] \"Papua_New_Guinea\"                          \n#&gt; [153] \"Paraguay\"                                  \n#&gt; [154] \"Peru\"                                      \n#&gt; [155] \"Philippines\"                               \n#&gt; [156] \"Poland\"                                    \n#&gt; [157] \"Portugal\"                                  \n#&gt; [158] \"Puerto_Rico\"                               \n#&gt; [159] \"Qatar\"                                     \n#&gt; [160] \"Romania\"                                   \n#&gt; [161] \"Russia\"                                    \n#&gt; [162] \"Rwanda\"                                    \n#&gt; [163] \"Saint_Kitts_and_Nevis\"                     \n#&gt; [164] \"Saint_Lucia\"                               \n#&gt; [165] \"Saint_Vincent_and_the_Grenadines\"          \n#&gt; [166] \"San_Marino\"                                \n#&gt; [167] \"Sao_Tome_and_Principe\"                     \n#&gt; [168] \"Saudi_Arabia\"                              \n#&gt; [169] \"Senegal\"                                   \n#&gt; [170] \"Serbia\"                                    \n#&gt; [171] \"Seychelles\"                                \n#&gt; [172] \"Sierra_Leone\"                              \n#&gt; [173] \"Singapore\"                                 \n#&gt; [174] \"Sint_Maarten\"                              \n#&gt; [175] \"Slovakia\"                                  \n#&gt; [176] \"Slovenia\"                                  \n#&gt; [177] \"Solomon_Islands\"                           \n#&gt; [178] \"Somalia\"                                   \n#&gt; [179] \"South_Africa\"                              \n#&gt; [180] \"South_Korea\"                               \n#&gt; [181] \"South_Sudan\"                               \n#&gt; [182] \"Spain\"                                     \n#&gt; [183] \"Sri_Lanka\"                                 \n#&gt; [184] \"Sudan\"                                     \n#&gt; [185] \"Suriname\"                                  \n#&gt; [186] \"Sweden\"                                    \n#&gt; [187] \"Switzerland\"                               \n#&gt; [188] \"Syria\"                                     \n#&gt; [189] \"Taiwan\"                                    \n#&gt; [190] \"Tajikistan\"                                \n#&gt; [191] \"Thailand\"                                  \n#&gt; [192] \"Timor_Leste\"                               \n#&gt; [193] \"Togo\"                                      \n#&gt; [194] \"Trinidad_and_Tobago\"                       \n#&gt; [195] \"Tunisia\"                                   \n#&gt; [196] \"Turkey\"                                    \n#&gt; [197] \"Turks_and_Caicos_islands\"                  \n#&gt; [198] \"Uganda\"                                    \n#&gt; [199] \"Ukraine\"                                   \n#&gt; [200] \"United_Arab_Emirates\"                      \n#&gt; [201] \"United_Kingdom\"                            \n#&gt; [202] \"United_Republic_of_Tanzania\"               \n#&gt; [203] \"United_States_of_America\"                  \n#&gt; [204] \"United_States_Virgin_Islands\"              \n#&gt; [205] \"Uruguay\"                                   \n#&gt; [206] \"Uzbekistan\"                                \n#&gt; [207] \"Vanuatu\"                                   \n#&gt; [208] \"Venezuela\"                                 \n#&gt; [209] \"Vietnam\"                                   \n#&gt; [210] \"Wallis_and_Futuna\"                         \n#&gt; [211] \"Western_Sahara\"                            \n#&gt; [212] \"Yemen\"                                     \n#&gt; [213] \"Zambia\"                                    \n#&gt; [214] \"Zimbabwe\"\n\n#getting month name column\ncovid_data_tbl$month_name&lt;-months(as.Date(covid_data_tbl$dateRep))\n\n##rolling up data to month year country Level\ncovid_mon_yr_country_lvl &lt;- covid_data_tbl %&gt;% \n  dplyr::group_by(month,month_name,year,countriesAndTerritories,geoId,countryterritoryCode,continentExp) %&gt;% \n  dplyr::summarise(cases = sum(cases, na.rm = T), .groups='drop') %&gt;% \n  dplyr::ungroup()\n\n##creating Cummulative Cases column\ncovid_mon_yr_country_lvl &lt;- covid_mon_yr_country_lvl %&gt;% \n  dplyr::arrange(countriesAndTerritories,year,month) %&gt;% \n  dplyr::group_by(countriesAndTerritories) %&gt;% \n  dplyr::mutate(cumulative_cases = cumsum(cases)) %&gt;% \n  dplyr::ungroup()\n\n##I am filtering only for those shown in the graph and for the year = 2020\ncovid_mon_yr_country_lvl_fil&lt;- covid_mon_yr_country_lvl %&gt;% \n  dplyr::filter(countriesAndTerritories %in% c(\"Germany\",\"Spain\",\"France\",\"United_Kingdom\",\"United_States_of_America\")& year == 2020) %&gt;%\n  dplyr::rename('Continent_Country' = countriesAndTerritories)\n\n#Graph using ggploat\ncovid_mon_yr_country_lvl_fil %&gt;% \n  mutate(label = if_else(month_name == \"December\",as.character(cumulative_cases),NA_character_)) %&gt;% \n  ggplot(aes(x=month,y =cumulative_cases))+\n  geom_line(aes(color = Continent_Country))+\n  scale_colour_brewer(palette = \"Set1\")+\n  scale_x_continuous(breaks=covid_mon_yr_country_lvl_fil$month,labels = covid_mon_yr_country_lvl_fil$month_name)+\n  scale_y_continuous(labels = scales::dollar_format(scale = 1/1e6,\n                                                    prefix = \"\",\n                                                    suffix = \"M\"))+\n  labs(title = \"COVID-19 confirmed cases worldwide\",\n       subtitle =  \"As of 12/5/2020,USA has the highest cases.\",\n       x = \"Year 2020\",\n       y= \"Cumulative Cases\"\n  )+\n  theme(legend.position = \"bottom\",\n        axis.text.x = element_text(angle=45,hjust = 1))+\n  geom_label_repel(aes(label=label),\n                   nudge_x = 1,na.rm = TRUE)\n\n\n\n\n\n\n\n\n\n\n2 Visualize the distribution of the mortality rate (deaths / population)\n\n# cat(\"\\014\")\n\n# Import libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(lubridate)\nlibrary(ggrepel)\nlibrary(maps)\nlibrary(readr)\nlibrary(scales)\n\n## DATA PREPARATION\ncovid_data_tbl &lt;- read_csv(\"https://opendata.ecdc.europa.eu/covid19/casedistribution/csv\", show_col_types = FALSE)\n\n\ncovid_mortality_rate &lt;- covid_data_tbl %&gt;%\n  select(countriesAndTerritories, deaths, popData2019) %&gt;% \n  set_names(c(\"country\", \"deaths\", \"population\")) %&gt;%\n  \n  # Selecting columns to focus on and adding a month column\n  mutate(mortality_rate = deaths/population)%&gt;%\n  mutate(across(country, str_replace_all, \"_\", \" \")) %&gt;%\n  mutate(country = case_when(\n    \n    country == \"United Kingdom\" ~ \"UK\",\n    country == \"United States of America\" ~ \"USA\",\n    country == \"Czechia\" ~ \"Czech Republic\",\n    TRUE ~ country\n  )) %&gt;%\n  \n  group_by(country) %&gt;%\n  summarize(deaths=sum(deaths),population=max(population),mortality_rate = sum(mortality_rate)) %&gt;%\n  ungroup() \n\n#&gt; Warning: There was 1 warning in `mutate()`.\n#&gt; ℹ In argument: `across(country, str_replace_all, \"_\", \" \")`.\n#&gt; Caused by warning:\n#&gt; ! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\n#&gt; Supply arguments directly to `.fns` through an anonymous function instead.\n#&gt; \n#&gt;   # Previously\n#&gt;   across(a:b, mean, na.rm = TRUE)\n#&gt; \n#&gt;   # Now\n#&gt;   across(a:b, \\(x) mean(x, na.rm = TRUE))\n\nworld &lt;- map_data(\"world\")\n\ncovid_world_mortality_rate &lt;- left_join(x = world, y = covid_mortality_rate, by=c(\"region\" = \"country\")) \n\nggplot(covid_world_mortality_rate, aes(x=long, y=lat, group = group, fill = (mortality_rate))) + \n  geom_polygon(colour = \"white\") +\n  scale_fill_continuous(low = \"dodgerblue\",\n                        high = \"black\",\n                        guide=\"colorbar\",\n                        labels=percent,\n                        limits = c(0, .0015)) +\n   \n  \n  \n  theme_bw() +\n  labs(fill = \"Mortality Rate\" ,\n       title = \"Confirmed COVID-19 deaths relative to the size of population\", \n       subtitle = \"More than 1.5 Million confirmed COVID-19 deaths worldwide\",\n       x=\"long\", \n       y=\"lat\")"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Last compiled: 2024-04-30\n\n1 Challenge 1 : Analyze the sales by location (state)\n\n#import libraries\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(lubridate)\n\n#load files\nbikes_tbl      &lt;- read_excel (\"F://Sneha/ss24-bdsb-SnehaPara/Dataset/01_bike_sales/01_raw_data/bikes.xlsx\") \norderlines_tbl &lt;- read_excel (\"F:/Sneha/ss24-bdsb-SnehaPara/Dataset/01_bike_sales/01_raw_data/orderlines.xlsx\") \n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n\nbikeshops_tbl  &lt;- read_excel(\"F:/Sneha/ss24-bdsb-SnehaPara/Dataset/01_bike_sales/01_raw_data/bikeshops.xlsx\") \n\n#examine files\n\n#join files using the keys product id, bikeshop id and customer id\nbike_orderlines_joined_tbl &lt;- orderlines_tbl %&gt;%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %&gt;%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n#Examine the joined files \n\n# Select State as feature and examine the data \n\n# wrangle data \nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_joined_tbl %&gt;%\n  separate(col    = location,\n           into   = c(\"city\",\"state\"),\n           sep    = \",\") %&gt;%\n  mutate(total.price = price * quantity) %&gt;%\n  select(-...1, -gender) %&gt;%\n  select(-ends_with(\".id\")) %&gt;%\n  bind_cols(bike_orderlines_joined_tbl %&gt;% select(order.id)) %&gt;% \n  \n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"city\"),state,\n         price, quantity, total.price,\n         everything()) %&gt;%\n  rename(bikeshop = name) %&gt;%\n  set_names(names(.) %&gt;% str_replace_all(\"\\\\.\", \"_\"))\n\n#extract required column\nsales_by_year_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  select(order_date, total_price) %&gt;%\n  mutate(year = year(order_date)) %&gt;%\n  group_by(year) %&gt;% \n  summarize(sales = sum(total_price), .groups = \"drop\") %&gt;%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \"€\"))\n\n\n\n#plot bar chart\nsales_by_year_tbl %&gt;%\n  \n  # Setup canvas with the columns year (x-axis) and sales (y-axis)\n  ggplot(aes(x = year, y = sales)) +\n  \n  # Geometries\n  geom_col(fill = \"#2DC6D6\") + # Use geom_col for a bar plot\n  geom_label(aes(label = sales_text)) + # Adding labels to the bars\n  geom_smooth(method = \"lm\", se = FALSE) + # Adding a trendline\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \"€\")) +\n  labs(\n    title    = \"Revenue by year\",\n    subtitle = \"Upward Trend\",\n    x = \"\", # Override defaults for x and y\n    y = \"Revenue\"\n  )\n\n#&gt; `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n2 Challenge 2 : Analyze the sales by location (state) by year and location\n\nsales_by_year_state_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  \n  # Select columns and add a year\n  select(order_date, total_price, state) %&gt;%\n  mutate(year = year(order_date)) %&gt;%\n  \n  # Group by and summarize year and main catgegory\n  group_by(year, state) %&gt;%\n  summarise(sales = sum(total_price), .groups = \"drop\") %&gt;%\n  ungroup() %&gt;%\n  \n  # Format $ Text\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \"€\"))\n\nsales_by_year_state_tbl %&gt;%\n  \n  ggplot(aes(x = year, y = sales, fill = state)) +\n  geom_col() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  \n  facet_wrap(~ state, scales = \"free_y\") +\n  \n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \"€\")) +\n  labs(\n    title = \"Revenue by year and state\",\n    subtitle = \"Each product category has an upward trend\",\n    fill = \"State\" # Changes the legend name\n  )\n\n\n\n\n\n\n\nlibrary(\"writexl\")\nbike_orderlines_wrangled_tbl %&gt;%\n  write_xlsx(\"bike_orderlines.xlsx\")\n# 7.2 CSV ----\nbike_orderlines_wrangled_tbl %&gt;% \n  write_csv(\"bike_orderlines.csv\")\n\n\n# 7.3 RDS ----\n\nbike_orderlines_wrangled_tbl %&gt;% \n  write_rds(\"bike_orderlines.rds\")"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Last compiled: 2024-04-30\n\n1 Challenge 1 : API\n\nThis API to find out when the ISS (International Space Station): This API returns times to us in the form of Unix time.\n\nlibrary(glue) \nlibrary(httr) # converts JSON files to R objects\nlibrary(jsonlite)\n\n resp &lt;- GET(\"http://api.open-notify.org/iss-now.json\", query = list(message=\"success\")) \nresp\n\n#&gt; Response [http://api.open-notify.org/iss-now.json?message=success]\n#&gt;   Date: 2024-04-30 07:59\n#&gt;   Status: 200\n#&gt;   Content-Type: application/json\n#&gt;   Size: 114 B\n\n data = fromJSON(rawToChar(resp$content)) \ndata\n\n#&gt; $iss_position\n#&gt; $iss_position$latitude\n#&gt; [1] \"40.4813\"\n#&gt; \n#&gt; $iss_position$longitude\n#&gt; [1] \"-103.3449\"\n#&gt; \n#&gt; \n#&gt; $message\n#&gt; [1] \"success\"\n#&gt; \n#&gt; $timestamp\n#&gt; [1] 1714463951\n\n\n\n\n\n2 Challenge 2 : Webscraping\n\n### 1.0 LIBRARIES ----\n\nlibrary(tidyverse) # Main Package - Loads dplyr, purrr, etc.\nlibrary(rvest)     # HTML Hacking & Web Scraping\nlibrary(glue)      # concatenate strings\nlibrary(stringi)   # character string/text processing\n\n## 1.1 COLLECT PRODUCT TYPES ----\nurl_home          &lt;- \"https://www.radon-bikes.de/\"\nhtml_home         &lt;- read_html(url_home)\nbike_family_tbl &lt;- html_home %&gt;%\n  html_nodes(css = \".megamenu__item &gt; a\") %&gt;%  \n  html_attr('href') %&gt;%  \n  discard(.p = ~stringr::str_detect(.x,\"wear\")) %&gt;%  \n  enframe(name = \"position\", value = \"cat_subcat_url\") %&gt;%  \n  \n  mutate(family_id = str_glue(\"https://www.radon-bikes.de{cat_subcat_url}bikegrid\"))\nbike_family_tbl\n\n\n\n  \n\n\n## 2.0 COLLECT BIKE DATA ----\n\nbike_category_url &lt;- bike_family_tbl$family_id[1]\nhtml_bike_category  &lt;- read_html(bike_category_url)\n\nbike_name_tbl        &lt;- html_bike_category %&gt;%\n  html_nodes(css = \".m-bikegrid__info .a-heading--small\") %&gt;%\n  html_text() %&gt;%\n  \n  \n  enframe(name = \"position\", value = \"name\")\nbike_name_tbl \n\n\n\n  \n\n\nbike_price_tbl &lt;- html_bike_category %&gt;%\n  html_nodes(css = \".m-bikegrid__price.currency_eur .m-bikegrid__price--active\") %&gt;%  \n  html_text() %&gt;% \n  enframe(name = \"position\", value = \"price\")\nbike_price_tbl\n\n\n\n  \n\n\nmodel_price_tbl &lt;- left_join(bike_name_tbl, bike_price_tbl, by = join_by(position))%&gt;% \n  select(name, price)\nmodel_price_tbl"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#patent-dominance-reduced-dataset",
    "href": "content/01_journal/03_data_wrangling.html#patent-dominance-reduced-dataset",
    "title": "Data Wrangling",
    "section": "",
    "text": "library(vroom)\n\n#&gt; Warning: package 'vroom' was built under R version 4.3.3\n\nlibrary(data.table)\n\n#&gt; Warning: package 'data.table' was built under R version 4.3.3\n\nlibrary(tidyverse)\n\n#&gt; Warning: package 'tidyverse' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'ggplot2' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'tidyr' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'readr' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'purrr' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'dplyr' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'forcats' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'lubridate' was built under R version 4.3.3\n\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::between()         masks data.table::between()\n#&gt; ✖ readr::col_character()   masks vroom::col_character()\n#&gt; ✖ readr::col_date()        masks vroom::col_date()\n#&gt; ✖ readr::col_datetime()    masks vroom::col_datetime()\n#&gt; ✖ readr::col_double()      masks vroom::col_double()\n#&gt; ✖ readr::col_factor()      masks vroom::col_factor()\n#&gt; ✖ readr::col_guess()       masks vroom::col_guess()\n#&gt; ✖ readr::col_integer()     masks vroom::col_integer()\n#&gt; ✖ readr::col_logical()     masks vroom::col_logical()\n#&gt; ✖ readr::col_number()      masks vroom::col_number()\n#&gt; ✖ readr::col_skip()        masks vroom::col_skip()\n#&gt; ✖ readr::col_time()        masks vroom::col_time()\n#&gt; ✖ readr::cols()            masks vroom::cols()\n#&gt; ✖ readr::date_names_lang() masks vroom::date_names_lang()\n#&gt; ✖ readr::default_locale()  masks vroom::default_locale()\n#&gt; ✖ dplyr::filter()          masks stats::filter()\n#&gt; ✖ dplyr::first()           masks data.table::first()\n#&gt; ✖ readr::fwf_cols()        masks vroom::fwf_cols()\n#&gt; ✖ readr::fwf_empty()       masks vroom::fwf_empty()\n#&gt; ✖ readr::fwf_positions()   masks vroom::fwf_positions()\n#&gt; ✖ readr::fwf_widths()      masks vroom::fwf_widths()\n#&gt; ✖ lubridate::hour()        masks data.table::hour()\n#&gt; ✖ lubridate::isoweek()     masks data.table::isoweek()\n#&gt; ✖ dplyr::lag()             masks stats::lag()\n#&gt; ✖ dplyr::last()            masks data.table::last()\n#&gt; ✖ readr::locale()          masks vroom::locale()\n#&gt; ✖ lubridate::mday()        masks data.table::mday()\n#&gt; ✖ lubridate::minute()      masks data.table::minute()\n#&gt; ✖ lubridate::month()       masks data.table::month()\n#&gt; ✖ readr::output_column()   masks vroom::output_column()\n#&gt; ✖ readr::problems()        masks vroom::problems()\n#&gt; ✖ lubridate::quarter()     masks data.table::quarter()\n#&gt; ✖ lubridate::second()      masks data.table::second()\n#&gt; ✖ purrr::transpose()       masks data.table::transpose()\n#&gt; ✖ lubridate::wday()        masks data.table::wday()\n#&gt; ✖ lubridate::week()        masks data.table::week()\n#&gt; ✖ lubridate::yday()        masks data.table::yday()\n#&gt; ✖ lubridate::year()        masks data.table::year()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ncol_types &lt;- list(\n  id = col_character(),\n  type = col_character(),\n  organization = col_character()\n)\n\nassignee_tbl &lt;- vroom(\n  file       = \"F:/Sneha/ss24-bdsb-SnehaPara/Dataset/Patent_data_reduced/assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\ncol_types &lt;- list(\n  patent_id = col_character(),\n  assignee_id = col_character(),\n  location_id = col_character()\n)\n\npatent_assignee_tbl &lt;- vroom(\n  file       = \"F:/Sneha/ss24-bdsb-SnehaPara/Dataset/Patent_data_reduced/patent_assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n#&gt; Warning: The following named parsers don't match the column names: location_id\n\nJoin_tbl &lt;- merge(patent_assignee_tbl,assignee_tbl, by.x = \"assignee_id\", by.y = \"id\") \n\nnum_tbl&lt;- Join_tbl%&gt;%\n  select(patent_id,organization)%&gt;% \n  count(organization)%&gt;%\n  group_by(organization) \n\nfinal_tbl &lt;- num_tbl %&gt;%\n  select (organization,n)%&gt;%\n  arrange(desc(n))\n\n#List of top ten companies with most assigned/granted patents.\n\nhead(final_tbl,10)"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#recent-patent-acitivity",
    "href": "content/01_journal/03_data_wrangling.html#recent-patent-acitivity",
    "title": "Data Wrangling",
    "section": "\n0.2 2.Recent patent acitivity",
    "text": "0.2 2.Recent patent acitivity"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html#map-the-time-course-of-the-cumulative-covid-19-cases",
    "href": "content/01_journal/04_data_visualization.html#map-the-time-course-of-the-cumulative-covid-19-cases",
    "title": "Data Visualization",
    "section": "",
    "text": "library(tidyverse)\n\n#&gt; Warning: package 'tidyverse' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'ggplot2' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'tidyr' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'readr' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'purrr' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'dplyr' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'forcats' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'lubridate' was built under R version 4.3.3\n\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(data.table)\n\n#&gt; Warning: package 'data.table' was built under R version 4.3.3\n\n\n#&gt; \n#&gt; Attaching package: 'data.table'\n#&gt; \n#&gt; The following objects are masked from 'package:lubridate':\n#&gt; \n#&gt;     hour, isoweek, mday, minute, month, quarter, second, wday, week,\n#&gt;     yday, year\n#&gt; \n#&gt; The following objects are masked from 'package:dplyr':\n#&gt; \n#&gt;     between, first, last\n#&gt; \n#&gt; The following object is masked from 'package:purrr':\n#&gt; \n#&gt;     transpose\n\nlibrary(ggplot2)\nlibrary(ggrepel)\n\n#&gt; Warning: package 'ggrepel' was built under R version 4.3.3\n\nlibrary(mapproj)\n\n#&gt; Warning: package 'mapproj' was built under R version 4.3.3\n\n\n#&gt; Loading required package: maps\n\n\n#&gt; Warning: package 'maps' was built under R version 4.3.3\n\n\n#&gt; \n#&gt; Attaching package: 'maps'\n#&gt; \n#&gt; The following object is masked from 'package:purrr':\n#&gt; \n#&gt;     map\n\nurl &lt;- \"https://opendata.ecdc.europa.eu/covid19/casedistribution/csv\"\ncovid_data_tbl &lt;- fread(url)\n\nclass(covid_data_tbl)\n\n#&gt; [1] \"data.table\" \"data.frame\"\n\ncolnames(covid_data_tbl)\n\n#&gt;  [1] \"dateRep\"                                                   \n#&gt;  [2] \"day\"                                                       \n#&gt;  [3] \"month\"                                                     \n#&gt;  [4] \"year\"                                                      \n#&gt;  [5] \"cases\"                                                     \n#&gt;  [6] \"deaths\"                                                    \n#&gt;  [7] \"countriesAndTerritories\"                                   \n#&gt;  [8] \"geoId\"                                                     \n#&gt;  [9] \"countryterritoryCode\"                                      \n#&gt; [10] \"popData2019\"                                               \n#&gt; [11] \"continentExp\"                                              \n#&gt; [12] \"Cumulative_number_for_14_days_of_COVID-19_cases_per_100000\"\n\nstr(covid_data_tbl)\n\n#&gt; Classes 'data.table' and 'data.frame':   61900 obs. of  12 variables:\n#&gt;  $ dateRep                                                   : chr  \"14/12/2020\" \"13/12/2020\" \"12/12/2020\" \"11/12/2020\" ...\n#&gt;  $ day                                                       : int  14 13 12 11 10 9 8 7 6 5 ...\n#&gt;  $ month                                                     : int  12 12 12 12 12 12 12 12 12 12 ...\n#&gt;  $ year                                                      : int  2020 2020 2020 2020 2020 2020 2020 2020 2020 2020 ...\n#&gt;  $ cases                                                     : int  746 298 113 63 202 135 200 210 234 235 ...\n#&gt;  $ deaths                                                    : int  6 9 11 10 16 13 6 26 10 18 ...\n#&gt;  $ countriesAndTerritories                                   : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n#&gt;  $ geoId                                                     : chr  \"AF\" \"AF\" \"AF\" \"AF\" ...\n#&gt;  $ countryterritoryCode                                      : chr  \"AFG\" \"AFG\" \"AFG\" \"AFG\" ...\n#&gt;  $ popData2019                                               : int  38041757 38041757 38041757 38041757 38041757 38041757 38041757 38041757 38041757 38041757 ...\n#&gt;  $ continentExp                                              : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n#&gt;  $ Cumulative_number_for_14_days_of_COVID-19_cases_per_100000: num  9.01 7.05 6.87 7.13 6.97 ...\n#&gt;  - attr(*, \".internal.selfref\")=&lt;externalptr&gt;\n\n#check the unique country present.\nunique(covid_data_tbl$countriesAndTerritories)\n\n#&gt;   [1] \"Afghanistan\"                               \n#&gt;   [2] \"Albania\"                                   \n#&gt;   [3] \"Algeria\"                                   \n#&gt;   [4] \"Andorra\"                                   \n#&gt;   [5] \"Angola\"                                    \n#&gt;   [6] \"Anguilla\"                                  \n#&gt;   [7] \"Antigua_and_Barbuda\"                       \n#&gt;   [8] \"Argentina\"                                 \n#&gt;   [9] \"Armenia\"                                   \n#&gt;  [10] \"Aruba\"                                     \n#&gt;  [11] \"Australia\"                                 \n#&gt;  [12] \"Austria\"                                   \n#&gt;  [13] \"Azerbaijan\"                                \n#&gt;  [14] \"Bahamas\"                                   \n#&gt;  [15] \"Bahrain\"                                   \n#&gt;  [16] \"Bangladesh\"                                \n#&gt;  [17] \"Barbados\"                                  \n#&gt;  [18] \"Belarus\"                                   \n#&gt;  [19] \"Belgium\"                                   \n#&gt;  [20] \"Belize\"                                    \n#&gt;  [21] \"Benin\"                                     \n#&gt;  [22] \"Bermuda\"                                   \n#&gt;  [23] \"Bhutan\"                                    \n#&gt;  [24] \"Bolivia\"                                   \n#&gt;  [25] \"Bonaire, Saint Eustatius and Saba\"         \n#&gt;  [26] \"Bosnia_and_Herzegovina\"                    \n#&gt;  [27] \"Botswana\"                                  \n#&gt;  [28] \"Brazil\"                                    \n#&gt;  [29] \"British_Virgin_Islands\"                    \n#&gt;  [30] \"Brunei_Darussalam\"                         \n#&gt;  [31] \"Bulgaria\"                                  \n#&gt;  [32] \"Burkina_Faso\"                              \n#&gt;  [33] \"Burundi\"                                   \n#&gt;  [34] \"Cambodia\"                                  \n#&gt;  [35] \"Cameroon\"                                  \n#&gt;  [36] \"Canada\"                                    \n#&gt;  [37] \"Cape_Verde\"                                \n#&gt;  [38] \"Cases_on_an_international_conveyance_Japan\"\n#&gt;  [39] \"Cayman_Islands\"                            \n#&gt;  [40] \"Central_African_Republic\"                  \n#&gt;  [41] \"Chad\"                                      \n#&gt;  [42] \"Chile\"                                     \n#&gt;  [43] \"China\"                                     \n#&gt;  [44] \"Colombia\"                                  \n#&gt;  [45] \"Comoros\"                                   \n#&gt;  [46] \"Congo\"                                     \n#&gt;  [47] \"Costa_Rica\"                                \n#&gt;  [48] \"Cote_dIvoire\"                              \n#&gt;  [49] \"Croatia\"                                   \n#&gt;  [50] \"Cuba\"                                      \n#&gt;  [51] \"Curaçao\"                                   \n#&gt;  [52] \"Cyprus\"                                    \n#&gt;  [53] \"Czechia\"                                   \n#&gt;  [54] \"Democratic_Republic_of_the_Congo\"          \n#&gt;  [55] \"Denmark\"                                   \n#&gt;  [56] \"Djibouti\"                                  \n#&gt;  [57] \"Dominica\"                                  \n#&gt;  [58] \"Dominican_Republic\"                        \n#&gt;  [59] \"Ecuador\"                                   \n#&gt;  [60] \"Egypt\"                                     \n#&gt;  [61] \"El_Salvador\"                               \n#&gt;  [62] \"Equatorial_Guinea\"                         \n#&gt;  [63] \"Eritrea\"                                   \n#&gt;  [64] \"Estonia\"                                   \n#&gt;  [65] \"Eswatini\"                                  \n#&gt;  [66] \"Ethiopia\"                                  \n#&gt;  [67] \"Falkland_Islands_(Malvinas)\"               \n#&gt;  [68] \"Faroe_Islands\"                             \n#&gt;  [69] \"Fiji\"                                      \n#&gt;  [70] \"Finland\"                                   \n#&gt;  [71] \"France\"                                    \n#&gt;  [72] \"French_Polynesia\"                          \n#&gt;  [73] \"Gabon\"                                     \n#&gt;  [74] \"Gambia\"                                    \n#&gt;  [75] \"Georgia\"                                   \n#&gt;  [76] \"Germany\"                                   \n#&gt;  [77] \"Ghana\"                                     \n#&gt;  [78] \"Gibraltar\"                                 \n#&gt;  [79] \"Greece\"                                    \n#&gt;  [80] \"Greenland\"                                 \n#&gt;  [81] \"Grenada\"                                   \n#&gt;  [82] \"Guam\"                                      \n#&gt;  [83] \"Guatemala\"                                 \n#&gt;  [84] \"Guernsey\"                                  \n#&gt;  [85] \"Guinea\"                                    \n#&gt;  [86] \"Guinea_Bissau\"                             \n#&gt;  [87] \"Guyana\"                                    \n#&gt;  [88] \"Haiti\"                                     \n#&gt;  [89] \"Holy_See\"                                  \n#&gt;  [90] \"Honduras\"                                  \n#&gt;  [91] \"Hungary\"                                   \n#&gt;  [92] \"Iceland\"                                   \n#&gt;  [93] \"India\"                                     \n#&gt;  [94] \"Indonesia\"                                 \n#&gt;  [95] \"Iran\"                                      \n#&gt;  [96] \"Iraq\"                                      \n#&gt;  [97] \"Ireland\"                                   \n#&gt;  [98] \"Isle_of_Man\"                               \n#&gt;  [99] \"Israel\"                                    \n#&gt; [100] \"Italy\"                                     \n#&gt; [101] \"Jamaica\"                                   \n#&gt; [102] \"Japan\"                                     \n#&gt; [103] \"Jersey\"                                    \n#&gt; [104] \"Jordan\"                                    \n#&gt; [105] \"Kazakhstan\"                                \n#&gt; [106] \"Kenya\"                                     \n#&gt; [107] \"Kosovo\"                                    \n#&gt; [108] \"Kuwait\"                                    \n#&gt; [109] \"Kyrgyzstan\"                                \n#&gt; [110] \"Laos\"                                      \n#&gt; [111] \"Latvia\"                                    \n#&gt; [112] \"Lebanon\"                                   \n#&gt; [113] \"Lesotho\"                                   \n#&gt; [114] \"Liberia\"                                   \n#&gt; [115] \"Libya\"                                     \n#&gt; [116] \"Liechtenstein\"                             \n#&gt; [117] \"Lithuania\"                                 \n#&gt; [118] \"Luxembourg\"                                \n#&gt; [119] \"Madagascar\"                                \n#&gt; [120] \"Malawi\"                                    \n#&gt; [121] \"Malaysia\"                                  \n#&gt; [122] \"Maldives\"                                  \n#&gt; [123] \"Mali\"                                      \n#&gt; [124] \"Malta\"                                     \n#&gt; [125] \"Marshall_Islands\"                          \n#&gt; [126] \"Mauritania\"                                \n#&gt; [127] \"Mauritius\"                                 \n#&gt; [128] \"Mexico\"                                    \n#&gt; [129] \"Moldova\"                                   \n#&gt; [130] \"Monaco\"                                    \n#&gt; [131] \"Mongolia\"                                  \n#&gt; [132] \"Montenegro\"                                \n#&gt; [133] \"Montserrat\"                                \n#&gt; [134] \"Morocco\"                                   \n#&gt; [135] \"Mozambique\"                                \n#&gt; [136] \"Myanmar\"                                   \n#&gt; [137] \"Namibia\"                                   \n#&gt; [138] \"Nepal\"                                     \n#&gt; [139] \"Netherlands\"                               \n#&gt; [140] \"New_Caledonia\"                             \n#&gt; [141] \"New_Zealand\"                               \n#&gt; [142] \"Nicaragua\"                                 \n#&gt; [143] \"Niger\"                                     \n#&gt; [144] \"Nigeria\"                                   \n#&gt; [145] \"North_Macedonia\"                           \n#&gt; [146] \"Northern_Mariana_Islands\"                  \n#&gt; [147] \"Norway\"                                    \n#&gt; [148] \"Oman\"                                      \n#&gt; [149] \"Pakistan\"                                  \n#&gt; [150] \"Palestine\"                                 \n#&gt; [151] \"Panama\"                                    \n#&gt; [152] \"Papua_New_Guinea\"                          \n#&gt; [153] \"Paraguay\"                                  \n#&gt; [154] \"Peru\"                                      \n#&gt; [155] \"Philippines\"                               \n#&gt; [156] \"Poland\"                                    \n#&gt; [157] \"Portugal\"                                  \n#&gt; [158] \"Puerto_Rico\"                               \n#&gt; [159] \"Qatar\"                                     \n#&gt; [160] \"Romania\"                                   \n#&gt; [161] \"Russia\"                                    \n#&gt; [162] \"Rwanda\"                                    \n#&gt; [163] \"Saint_Kitts_and_Nevis\"                     \n#&gt; [164] \"Saint_Lucia\"                               \n#&gt; [165] \"Saint_Vincent_and_the_Grenadines\"          \n#&gt; [166] \"San_Marino\"                                \n#&gt; [167] \"Sao_Tome_and_Principe\"                     \n#&gt; [168] \"Saudi_Arabia\"                              \n#&gt; [169] \"Senegal\"                                   \n#&gt; [170] \"Serbia\"                                    \n#&gt; [171] \"Seychelles\"                                \n#&gt; [172] \"Sierra_Leone\"                              \n#&gt; [173] \"Singapore\"                                 \n#&gt; [174] \"Sint_Maarten\"                              \n#&gt; [175] \"Slovakia\"                                  \n#&gt; [176] \"Slovenia\"                                  \n#&gt; [177] \"Solomon_Islands\"                           \n#&gt; [178] \"Somalia\"                                   \n#&gt; [179] \"South_Africa\"                              \n#&gt; [180] \"South_Korea\"                               \n#&gt; [181] \"South_Sudan\"                               \n#&gt; [182] \"Spain\"                                     \n#&gt; [183] \"Sri_Lanka\"                                 \n#&gt; [184] \"Sudan\"                                     \n#&gt; [185] \"Suriname\"                                  \n#&gt; [186] \"Sweden\"                                    \n#&gt; [187] \"Switzerland\"                               \n#&gt; [188] \"Syria\"                                     \n#&gt; [189] \"Taiwan\"                                    \n#&gt; [190] \"Tajikistan\"                                \n#&gt; [191] \"Thailand\"                                  \n#&gt; [192] \"Timor_Leste\"                               \n#&gt; [193] \"Togo\"                                      \n#&gt; [194] \"Trinidad_and_Tobago\"                       \n#&gt; [195] \"Tunisia\"                                   \n#&gt; [196] \"Turkey\"                                    \n#&gt; [197] \"Turks_and_Caicos_islands\"                  \n#&gt; [198] \"Uganda\"                                    \n#&gt; [199] \"Ukraine\"                                   \n#&gt; [200] \"United_Arab_Emirates\"                      \n#&gt; [201] \"United_Kingdom\"                            \n#&gt; [202] \"United_Republic_of_Tanzania\"               \n#&gt; [203] \"United_States_of_America\"                  \n#&gt; [204] \"United_States_Virgin_Islands\"              \n#&gt; [205] \"Uruguay\"                                   \n#&gt; [206] \"Uzbekistan\"                                \n#&gt; [207] \"Vanuatu\"                                   \n#&gt; [208] \"Venezuela\"                                 \n#&gt; [209] \"Vietnam\"                                   \n#&gt; [210] \"Wallis_and_Futuna\"                         \n#&gt; [211] \"Western_Sahara\"                            \n#&gt; [212] \"Yemen\"                                     \n#&gt; [213] \"Zambia\"                                    \n#&gt; [214] \"Zimbabwe\"\n\n#getting month name column\ncovid_data_tbl$month_name&lt;-months(as.Date(covid_data_tbl$dateRep))\n\n##rolling up data to month year country Level\ncovid_mon_yr_country_lvl &lt;- covid_data_tbl %&gt;% \n  dplyr::group_by(month,month_name,year,countriesAndTerritories,geoId,countryterritoryCode,continentExp) %&gt;% \n  dplyr::summarise(cases = sum(cases, na.rm = T)) %&gt;% \n  dplyr::ungroup()\n\n#&gt; `summarise()` has grouped output by 'month', 'month_name', 'year',\n#&gt; 'countriesAndTerritories', 'geoId', 'countryterritoryCode'. You can override\n#&gt; using the `.groups` argument.\n\n##creating Cummulative Cases column\ncovid_mon_yr_country_lvl &lt;- covid_mon_yr_country_lvl %&gt;% \n  dplyr::arrange(countriesAndTerritories,year,month) %&gt;% \n  dplyr::group_by(countriesAndTerritories) %&gt;% \n  dplyr::mutate(cumulative_cases = cumsum(cases)) %&gt;% \n  dplyr::ungroup()\n\n##I am filtering only for those shown in the graph and for the year = 2020\ncovid_mon_yr_country_lvl_fil&lt;- covid_mon_yr_country_lvl %&gt;% \n  dplyr::filter(countriesAndTerritories %in% c(\"Germany\",\"Spain\",\"France\",\"United_Kingdom\",\"United_States_of_America\")& year == 2020) %&gt;%\n  dplyr::rename('Continent_Country' = countriesAndTerritories)\n\n#Graph using ggploat\ncovid_mon_yr_country_lvl_fil %&gt;% \n  mutate(label = if_else(month_name == \"December\",as.character(cumulative_cases),NA_character_)) %&gt;% \n  ggplot(aes(x=month,y =cumulative_cases))+\n  geom_line(aes(color = Continent_Country))+\n  scale_colour_brewer(palette = \"Set1\")+\n  scale_x_continuous(breaks=covid_mon_yr_country_lvl_fil$month,labels = covid_mon_yr_country_lvl_fil$month_name)+\n  scale_y_continuous(labels = scales::dollar_format(scale = 1/1e6,\n                                                    prefix = \"\",\n                                                    suffix = \"M\"))+\n  labs(title = \"COVID-19 confirmed cases worldwide\",\n       subtitle =  \"As of 12/5/2020,USA has the highest cases.\",\n       x = \"Year 2020\",\n       y= \"Cumulative Cases\"\n  )+\n  theme(legend.position = \"bottom\",\n        axis.text.x = element_text(angle=45,hjust = 1))+\n  geom_label_repel(aes(label=label),\n                   nudge_x = 1,na.rm = TRUE)"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html#visualize-the-distribution-of-the-mortality-rate-deaths-population",
    "href": "content/01_journal/04_data_visualization.html#visualize-the-distribution-of-the-mortality-rate-deaths-population",
    "title": "Data Visualization",
    "section": "\n2 2. Visualize the distribution of the mortality rate (deaths / population)",
    "text": "2 2. Visualize the distribution of the mortality rate (deaths / population)\n\ncat(\"\\014\")\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(ggthemes)\n\n#&gt; Warning: package 'ggthemes' was built under R version 4.3.3\n\nlibrary(lubridate)\nlibrary(ggrepel)\nlibrary(maps)\nlibrary(readr)\nlibrary(scales)\n\n#&gt; Warning: package 'scales' was built under R version 4.3.3\n\n\n#&gt; \n#&gt; Attaching package: 'scales'\n\n\n#&gt; The following object is masked from 'package:purrr':\n#&gt; \n#&gt;     discard\n\n\n#&gt; The following object is masked from 'package:readr':\n#&gt; \n#&gt;     col_factor\n\n## DATA PREPARATION\ncovid_data_tbl &lt;- read_csv(\"https://opendata.ecdc.europa.eu/covid19/casedistribution/csv\")\n\n#&gt; Rows: 61900 Columns: 12\n\n\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr (5): dateRep, countriesAndTerritories, geoId, countryterritoryCode, cont...\n#&gt; dbl (7): day, month, year, cases, deaths, popData2019, Cumulative_number_for...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncovid_mortality_rate &lt;- covid_data_tbl %&gt;%\n  select(countriesAndTerritories, deaths, popData2019) %&gt;% \n  set_names(c(\"country\", \"deaths\", \"population\")) %&gt;%\n  \n  # Selecting columns to focus on and adding a month column\n  mutate(mortality_rate = deaths/population)%&gt;%\n  mutate(across(country, str_replace_all, \"_\", \" \")) %&gt;%\n  mutate(country = case_when(\n    \n    country == \"United Kingdom\" ~ \"UK\",\n    country == \"United States of America\" ~ \"USA\",\n    country == \"Czechia\" ~ \"Czech Republic\",\n    TRUE ~ country\n  )) %&gt;%\n  \n  group_by(country) %&gt;%\n  summarize(deaths=sum(deaths),population=max(population),mortality_rate = sum(mortality_rate)) %&gt;%\n  ungroup() \n\n#&gt; Warning: There was 1 warning in `mutate()`.\n#&gt; ℹ In argument: `across(country, str_replace_all, \"_\", \" \")`.\n#&gt; Caused by warning:\n#&gt; ! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\n#&gt; Supply arguments directly to `.fns` through an anonymous function instead.\n#&gt; \n#&gt;   # Previously\n#&gt;   across(a:b, mean, na.rm = TRUE)\n#&gt; \n#&gt;   # Now\n#&gt;   across(a:b, \\(x) mean(x, na.rm = TRUE))\n\nworld &lt;- map_data(\"world\")\n\ncovid_world_mortality_rate &lt;- left_join(x = world, y = covid_mortality_rate, by=c(\"region\" = \"country\")) \n\nggplot(covid_world_mortality_rate, aes(x=long, y=lat, group = group, fill = (mortality_rate))) + \n  geom_polygon(colour = \"white\") +\n  scale_fill_continuous(low = \"dodgerblue\",\n                        high = \"black\",\n                        guide=\"colorbar\",\n                        labels=percent,\n                        limits = c(0, .0015)) +\n   \n  \n  \n  theme_bw() +\n  labs(fill = \"Mortality Rate\" ,\n       title = \"Confirmed COVID-19 deaths relative to the size of population\", \n       subtitle = \"More than 1.5 Million confirmed COVID-19 deaths worldwide\",\n       x=\"long\", \n       y=\"lat\") \n\n\n\n\n\n\n  # scale_y_continuous(breaks=c()) +\n  # scale_x_continuous(breaks=c()) +\n  # theme()"
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#collect-product-types--",
    "href": "content/01_journal/02_data_acquisition.html#collect-product-types--",
    "title": "Data Acquisition",
    "section": "1.1 1.1 COLLECT PRODUCT TYPES —-",
    "text": "1.1 1.1 COLLECT PRODUCT TYPES —-\nurl_home &lt;- “https://www.radon-bikes.de/” xopen(url_home) html_home &lt;- read_html(url_home) bike_family_tbl &lt;- html_home %&gt;% html_nodes(css = “.megamenu__item &gt; a”) %&gt;%\nhtml_attr(‘href’) %&gt;%\ndiscard(.p = ~stringr::str_detect(.x,“wear”)) %&gt;%\nenframe(name = “position”, value = “cat_subcat_url”) %&gt;%\nmutate(family_id = str_glue(“https://www.radon-bikes.de{cat_subcat_url}bikegrid”)) bike_family_tbl"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#collect-bike-data--",
    "href": "content/01_journal/02_data_acquisition.html#collect-bike-data--",
    "title": "Data Acquisition",
    "section": "1.2 2.0 COLLECT BIKE DATA —-",
    "text": "1.2 2.0 COLLECT BIKE DATA —-\nbike_category_url &lt;- bike_family_tbl$family_id[1] xopen(bike_category_url) html_bike_category &lt;- read_html(bike_category_url)\nbike_name_tbl &lt;- html_bike_category %&gt;% html_nodes(css = “.m-bikegrid__info .a-heading–small”) %&gt;% html_text() %&gt;%\nenframe(name = “position”, value = “name”) bike_name_tbl\nbike_price_tbl &lt;- html_bike_category %&gt;% html_nodes(css = “.m-bikegrid__price.currency_eur .m-bikegrid__price–active”) %&gt;%\nhtml_text() %&gt;% enframe(name = “position”, value = “price”) bike_price_tbl\nmodel_price_tbl &lt;- left_join(bike_name_tbl, bike_price_tbl)%&gt;% select(name, price) model_price_tbl"
  }
]