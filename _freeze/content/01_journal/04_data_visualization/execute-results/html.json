{
  "hash": "dc60f21e8947f4444174c8ea41d36ed0",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization\"\nauthor: \"Sneha Para\"\n---\n\n\nLast compiled: 2024-04-30\n\n# Map the time course of the cumulative Covid-19 cases\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-1_a68bbeea49c1779d44bc6c1cfa10edbe'}\n\n```{.r .cell-code}\n#import libraries\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(mapproj)\n\n\nurl <- \"https://opendata.ecdc.europa.eu/covid19/casedistribution/csv\"\ncovid_data_tbl <- fread(url)\n\nclass(covid_data_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"data.table\" \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\ncolnames(covid_data_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] \"dateRep\"                                                   \n#>  [2] \"day\"                                                       \n#>  [3] \"month\"                                                     \n#>  [4] \"year\"                                                      \n#>  [5] \"cases\"                                                     \n#>  [6] \"deaths\"                                                    \n#>  [7] \"countriesAndTerritories\"                                   \n#>  [8] \"geoId\"                                                     \n#>  [9] \"countryterritoryCode\"                                      \n#> [10] \"popData2019\"                                               \n#> [11] \"continentExp\"                                              \n#> [12] \"Cumulative_number_for_14_days_of_COVID-19_cases_per_100000\"\n```\n:::\n\n```{.r .cell-code}\nstr(covid_data_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Classes 'data.table' and 'data.frame':\t61900 obs. of  12 variables:\n#>  $ dateRep                                                   : chr  \"14/12/2020\" \"13/12/2020\" \"12/12/2020\" \"11/12/2020\" ...\n#>  $ day                                                       : int  14 13 12 11 10 9 8 7 6 5 ...\n#>  $ month                                                     : int  12 12 12 12 12 12 12 12 12 12 ...\n#>  $ year                                                      : int  2020 2020 2020 2020 2020 2020 2020 2020 2020 2020 ...\n#>  $ cases                                                     : int  746 298 113 63 202 135 200 210 234 235 ...\n#>  $ deaths                                                    : int  6 9 11 10 16 13 6 26 10 18 ...\n#>  $ countriesAndTerritories                                   : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n#>  $ geoId                                                     : chr  \"AF\" \"AF\" \"AF\" \"AF\" ...\n#>  $ countryterritoryCode                                      : chr  \"AFG\" \"AFG\" \"AFG\" \"AFG\" ...\n#>  $ popData2019                                               : int  38041757 38041757 38041757 38041757 38041757 38041757 38041757 38041757 38041757 38041757 ...\n#>  $ continentExp                                              : chr  \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n#>  $ Cumulative_number_for_14_days_of_COVID-19_cases_per_100000: num  9.01 7.05 6.87 7.13 6.97 ...\n#>  - attr(*, \".internal.selfref\")=<externalptr>\n```\n:::\n\n```{.r .cell-code}\n#check the unique country present.\nunique(covid_data_tbl$countriesAndTerritories)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>   [1] \"Afghanistan\"                               \n#>   [2] \"Albania\"                                   \n#>   [3] \"Algeria\"                                   \n#>   [4] \"Andorra\"                                   \n#>   [5] \"Angola\"                                    \n#>   [6] \"Anguilla\"                                  \n#>   [7] \"Antigua_and_Barbuda\"                       \n#>   [8] \"Argentina\"                                 \n#>   [9] \"Armenia\"                                   \n#>  [10] \"Aruba\"                                     \n#>  [11] \"Australia\"                                 \n#>  [12] \"Austria\"                                   \n#>  [13] \"Azerbaijan\"                                \n#>  [14] \"Bahamas\"                                   \n#>  [15] \"Bahrain\"                                   \n#>  [16] \"Bangladesh\"                                \n#>  [17] \"Barbados\"                                  \n#>  [18] \"Belarus\"                                   \n#>  [19] \"Belgium\"                                   \n#>  [20] \"Belize\"                                    \n#>  [21] \"Benin\"                                     \n#>  [22] \"Bermuda\"                                   \n#>  [23] \"Bhutan\"                                    \n#>  [24] \"Bolivia\"                                   \n#>  [25] \"Bonaire, Saint Eustatius and Saba\"         \n#>  [26] \"Bosnia_and_Herzegovina\"                    \n#>  [27] \"Botswana\"                                  \n#>  [28] \"Brazil\"                                    \n#>  [29] \"British_Virgin_Islands\"                    \n#>  [30] \"Brunei_Darussalam\"                         \n#>  [31] \"Bulgaria\"                                  \n#>  [32] \"Burkina_Faso\"                              \n#>  [33] \"Burundi\"                                   \n#>  [34] \"Cambodia\"                                  \n#>  [35] \"Cameroon\"                                  \n#>  [36] \"Canada\"                                    \n#>  [37] \"Cape_Verde\"                                \n#>  [38] \"Cases_on_an_international_conveyance_Japan\"\n#>  [39] \"Cayman_Islands\"                            \n#>  [40] \"Central_African_Republic\"                  \n#>  [41] \"Chad\"                                      \n#>  [42] \"Chile\"                                     \n#>  [43] \"China\"                                     \n#>  [44] \"Colombia\"                                  \n#>  [45] \"Comoros\"                                   \n#>  [46] \"Congo\"                                     \n#>  [47] \"Costa_Rica\"                                \n#>  [48] \"Cote_dIvoire\"                              \n#>  [49] \"Croatia\"                                   \n#>  [50] \"Cuba\"                                      \n#>  [51] \"CuraÃ§ao\"                                   \n#>  [52] \"Cyprus\"                                    \n#>  [53] \"Czechia\"                                   \n#>  [54] \"Democratic_Republic_of_the_Congo\"          \n#>  [55] \"Denmark\"                                   \n#>  [56] \"Djibouti\"                                  \n#>  [57] \"Dominica\"                                  \n#>  [58] \"Dominican_Republic\"                        \n#>  [59] \"Ecuador\"                                   \n#>  [60] \"Egypt\"                                     \n#>  [61] \"El_Salvador\"                               \n#>  [62] \"Equatorial_Guinea\"                         \n#>  [63] \"Eritrea\"                                   \n#>  [64] \"Estonia\"                                   \n#>  [65] \"Eswatini\"                                  \n#>  [66] \"Ethiopia\"                                  \n#>  [67] \"Falkland_Islands_(Malvinas)\"               \n#>  [68] \"Faroe_Islands\"                             \n#>  [69] \"Fiji\"                                      \n#>  [70] \"Finland\"                                   \n#>  [71] \"France\"                                    \n#>  [72] \"French_Polynesia\"                          \n#>  [73] \"Gabon\"                                     \n#>  [74] \"Gambia\"                                    \n#>  [75] \"Georgia\"                                   \n#>  [76] \"Germany\"                                   \n#>  [77] \"Ghana\"                                     \n#>  [78] \"Gibraltar\"                                 \n#>  [79] \"Greece\"                                    \n#>  [80] \"Greenland\"                                 \n#>  [81] \"Grenada\"                                   \n#>  [82] \"Guam\"                                      \n#>  [83] \"Guatemala\"                                 \n#>  [84] \"Guernsey\"                                  \n#>  [85] \"Guinea\"                                    \n#>  [86] \"Guinea_Bissau\"                             \n#>  [87] \"Guyana\"                                    \n#>  [88] \"Haiti\"                                     \n#>  [89] \"Holy_See\"                                  \n#>  [90] \"Honduras\"                                  \n#>  [91] \"Hungary\"                                   \n#>  [92] \"Iceland\"                                   \n#>  [93] \"India\"                                     \n#>  [94] \"Indonesia\"                                 \n#>  [95] \"Iran\"                                      \n#>  [96] \"Iraq\"                                      \n#>  [97] \"Ireland\"                                   \n#>  [98] \"Isle_of_Man\"                               \n#>  [99] \"Israel\"                                    \n#> [100] \"Italy\"                                     \n#> [101] \"Jamaica\"                                   \n#> [102] \"Japan\"                                     \n#> [103] \"Jersey\"                                    \n#> [104] \"Jordan\"                                    \n#> [105] \"Kazakhstan\"                                \n#> [106] \"Kenya\"                                     \n#> [107] \"Kosovo\"                                    \n#> [108] \"Kuwait\"                                    \n#> [109] \"Kyrgyzstan\"                                \n#> [110] \"Laos\"                                      \n#> [111] \"Latvia\"                                    \n#> [112] \"Lebanon\"                                   \n#> [113] \"Lesotho\"                                   \n#> [114] \"Liberia\"                                   \n#> [115] \"Libya\"                                     \n#> [116] \"Liechtenstein\"                             \n#> [117] \"Lithuania\"                                 \n#> [118] \"Luxembourg\"                                \n#> [119] \"Madagascar\"                                \n#> [120] \"Malawi\"                                    \n#> [121] \"Malaysia\"                                  \n#> [122] \"Maldives\"                                  \n#> [123] \"Mali\"                                      \n#> [124] \"Malta\"                                     \n#> [125] \"Marshall_Islands\"                          \n#> [126] \"Mauritania\"                                \n#> [127] \"Mauritius\"                                 \n#> [128] \"Mexico\"                                    \n#> [129] \"Moldova\"                                   \n#> [130] \"Monaco\"                                    \n#> [131] \"Mongolia\"                                  \n#> [132] \"Montenegro\"                                \n#> [133] \"Montserrat\"                                \n#> [134] \"Morocco\"                                   \n#> [135] \"Mozambique\"                                \n#> [136] \"Myanmar\"                                   \n#> [137] \"Namibia\"                                   \n#> [138] \"Nepal\"                                     \n#> [139] \"Netherlands\"                               \n#> [140] \"New_Caledonia\"                             \n#> [141] \"New_Zealand\"                               \n#> [142] \"Nicaragua\"                                 \n#> [143] \"Niger\"                                     \n#> [144] \"Nigeria\"                                   \n#> [145] \"North_Macedonia\"                           \n#> [146] \"Northern_Mariana_Islands\"                  \n#> [147] \"Norway\"                                    \n#> [148] \"Oman\"                                      \n#> [149] \"Pakistan\"                                  \n#> [150] \"Palestine\"                                 \n#> [151] \"Panama\"                                    \n#> [152] \"Papua_New_Guinea\"                          \n#> [153] \"Paraguay\"                                  \n#> [154] \"Peru\"                                      \n#> [155] \"Philippines\"                               \n#> [156] \"Poland\"                                    \n#> [157] \"Portugal\"                                  \n#> [158] \"Puerto_Rico\"                               \n#> [159] \"Qatar\"                                     \n#> [160] \"Romania\"                                   \n#> [161] \"Russia\"                                    \n#> [162] \"Rwanda\"                                    \n#> [163] \"Saint_Kitts_and_Nevis\"                     \n#> [164] \"Saint_Lucia\"                               \n#> [165] \"Saint_Vincent_and_the_Grenadines\"          \n#> [166] \"San_Marino\"                                \n#> [167] \"Sao_Tome_and_Principe\"                     \n#> [168] \"Saudi_Arabia\"                              \n#> [169] \"Senegal\"                                   \n#> [170] \"Serbia\"                                    \n#> [171] \"Seychelles\"                                \n#> [172] \"Sierra_Leone\"                              \n#> [173] \"Singapore\"                                 \n#> [174] \"Sint_Maarten\"                              \n#> [175] \"Slovakia\"                                  \n#> [176] \"Slovenia\"                                  \n#> [177] \"Solomon_Islands\"                           \n#> [178] \"Somalia\"                                   \n#> [179] \"South_Africa\"                              \n#> [180] \"South_Korea\"                               \n#> [181] \"South_Sudan\"                               \n#> [182] \"Spain\"                                     \n#> [183] \"Sri_Lanka\"                                 \n#> [184] \"Sudan\"                                     \n#> [185] \"Suriname\"                                  \n#> [186] \"Sweden\"                                    \n#> [187] \"Switzerland\"                               \n#> [188] \"Syria\"                                     \n#> [189] \"Taiwan\"                                    \n#> [190] \"Tajikistan\"                                \n#> [191] \"Thailand\"                                  \n#> [192] \"Timor_Leste\"                               \n#> [193] \"Togo\"                                      \n#> [194] \"Trinidad_and_Tobago\"                       \n#> [195] \"Tunisia\"                                   \n#> [196] \"Turkey\"                                    \n#> [197] \"Turks_and_Caicos_islands\"                  \n#> [198] \"Uganda\"                                    \n#> [199] \"Ukraine\"                                   \n#> [200] \"United_Arab_Emirates\"                      \n#> [201] \"United_Kingdom\"                            \n#> [202] \"United_Republic_of_Tanzania\"               \n#> [203] \"United_States_of_America\"                  \n#> [204] \"United_States_Virgin_Islands\"              \n#> [205] \"Uruguay\"                                   \n#> [206] \"Uzbekistan\"                                \n#> [207] \"Vanuatu\"                                   \n#> [208] \"Venezuela\"                                 \n#> [209] \"Vietnam\"                                   \n#> [210] \"Wallis_and_Futuna\"                         \n#> [211] \"Western_Sahara\"                            \n#> [212] \"Yemen\"                                     \n#> [213] \"Zambia\"                                    \n#> [214] \"Zimbabwe\"\n```\n:::\n\n```{.r .cell-code}\n#getting month name column\ncovid_data_tbl$month_name<-months(as.Date(covid_data_tbl$dateRep))\n\n##rolling up data to month year country Level\ncovid_mon_yr_country_lvl <- covid_data_tbl %>% \n  dplyr::group_by(month,month_name,year,countriesAndTerritories,geoId,countryterritoryCode,continentExp) %>% \n  dplyr::summarise(cases = sum(cases, na.rm = T), .groups='drop') %>% \n  dplyr::ungroup()\n\n##creating Cummulative Cases column\ncovid_mon_yr_country_lvl <- covid_mon_yr_country_lvl %>% \n  dplyr::arrange(countriesAndTerritories,year,month) %>% \n  dplyr::group_by(countriesAndTerritories) %>% \n  dplyr::mutate(cumulative_cases = cumsum(cases)) %>% \n  dplyr::ungroup()\n\n##I am filtering only for those shown in the graph and for the year = 2020\ncovid_mon_yr_country_lvl_fil<- covid_mon_yr_country_lvl %>% \n  dplyr::filter(countriesAndTerritories %in% c(\"Germany\",\"Spain\",\"France\",\"United_Kingdom\",\"United_States_of_America\")& year == 2020) %>%\n  dplyr::rename('Continent_Country' = countriesAndTerritories)\n\n#Graph using ggploat\ncovid_mon_yr_country_lvl_fil %>% \n  mutate(label = if_else(month_name == \"December\",as.character(cumulative_cases),NA_character_)) %>% \n  ggplot(aes(x=month,y =cumulative_cases))+\n  geom_line(aes(color = Continent_Country))+\n  scale_colour_brewer(palette = \"Set1\")+\n  scale_x_continuous(breaks=covid_mon_yr_country_lvl_fil$month,labels = covid_mon_yr_country_lvl_fil$month_name)+\n  scale_y_continuous(labels = scales::dollar_format(scale = 1/1e6,\n                                                    prefix = \"\",\n                                                    suffix = \"M\"))+\n  labs(title = \"COVID-19 confirmed cases worldwide\",\n       subtitle =  \"As of 12/5/2020,USA has the highest cases.\",\n       x = \"Year 2020\",\n       y= \"Cumulative Cases\"\n  )+\n  theme(legend.position = \"bottom\",\n        axis.text.x = element_text(angle=45,hjust = 1))+\n  geom_label_repel(aes(label=label),\n                   nudge_x = 1,na.rm = TRUE)\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n# Visualize the distribution of the mortality rate (deaths / population)\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-2_cfedbc7fa1d3772bb3c4242e3d2facff'}\n\n```{.r .cell-code}\n# cat(\"\\014\")\n\n# Import libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(lubridate)\nlibrary(ggrepel)\nlibrary(maps)\nlibrary(readr)\nlibrary(scales)\n\n## DATA PREPARATION\ncovid_data_tbl <- read_csv(\"https://opendata.ecdc.europa.eu/covid19/casedistribution/csv\", show_col_types = FALSE)\n\n\ncovid_mortality_rate <- covid_data_tbl %>%\n  select(countriesAndTerritories, deaths, popData2019) %>% \n  set_names(c(\"country\", \"deaths\", \"population\")) %>%\n  \n  # Selecting columns to focus on and adding a month column\n  mutate(mortality_rate = deaths/population)%>%\n  mutate(across(country, str_replace_all, \"_\", \" \")) %>%\n  mutate(country = case_when(\n    \n    country == \"United Kingdom\" ~ \"UK\",\n    country == \"United States of America\" ~ \"USA\",\n    country == \"Czechia\" ~ \"Czech Republic\",\n    TRUE ~ country\n  )) %>%\n  \n  group_by(country) %>%\n  summarize(deaths=sum(deaths),population=max(population),mortality_rate = sum(mortality_rate)) %>%\n  ungroup() \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: There was 1 warning in `mutate()`.\n#> â¹ In argument: `across(country, str_replace_all, \"_\", \" \")`.\n#> Caused by warning:\n#> ! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\n#> Supply arguments directly to `.fns` through an anonymous function instead.\n#> \n#>   # Previously\n#>   across(a:b, mean, na.rm = TRUE)\n#> \n#>   # Now\n#>   across(a:b, \\(x) mean(x, na.rm = TRUE))\n```\n:::\n\n```{.r .cell-code}\nworld <- map_data(\"world\")\n\ncovid_world_mortality_rate <- left_join(x = world, y = covid_mortality_rate, by=c(\"region\" = \"country\")) \n\nggplot(covid_world_mortality_rate, aes(x=long, y=lat, group = group, fill = (mortality_rate))) + \n  geom_polygon(colour = \"white\") +\n  scale_fill_continuous(low = \"dodgerblue\",\n                        high = \"black\",\n                        guide=\"colorbar\",\n                        labels=percent,\n                        limits = c(0, .0015)) +\n   \n  \n  \n  theme_bw() +\n  labs(fill = \"Mortality Rate\" ,\n       title = \"Confirmed COVID-19 deaths relative to the size of population\", \n       subtitle = \"More than 1.5 Million confirmed COVID-19 deaths worldwide\",\n       x=\"long\", \n       y=\"lat\") \n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}